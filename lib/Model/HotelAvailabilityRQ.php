<?php
/**
 * HotelAvailabilityRQ
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PlugAndTravel.BookingAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * HotelAvailabilityRQ Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HotelAvailabilityRQ implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'HotelAvailabilityRQ';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'flow_tracking_id' => 'string',
        'destination_code' => 'int',
        'check_in' => 'string',
        'check_out' => 'string',
        'country_of_residence' => 'string',
        'occupancies' => '\Swagger\Client\Model\Occupancy[]',
        'provider' => 'string',
        'currency' => 'string',
        'hotel_codes' => 'string[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'flow_tracking_id' => 'FlowTrackingId',
        'destination_code' => 'DestinationCode',
        'check_in' => 'CheckIn',
        'check_out' => 'CheckOut',
        'country_of_residence' => 'CountryOfResidence',
        'occupancies' => 'Occupancies',
        'provider' => 'Provider',
        'currency' => 'Currency',
        'hotel_codes' => 'HotelCodes'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'flow_tracking_id' => 'setFlowTrackingId',
        'destination_code' => 'setDestinationCode',
        'check_in' => 'setCheckIn',
        'check_out' => 'setCheckOut',
        'country_of_residence' => 'setCountryOfResidence',
        'occupancies' => 'setOccupancies',
        'provider' => 'setProvider',
        'currency' => 'setCurrency',
        'hotel_codes' => 'setHotelCodes'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'flow_tracking_id' => 'getFlowTrackingId',
        'destination_code' => 'getDestinationCode',
        'check_in' => 'getCheckIn',
        'check_out' => 'getCheckOut',
        'country_of_residence' => 'getCountryOfResidence',
        'occupancies' => 'getOccupancies',
        'provider' => 'getProvider',
        'currency' => 'getCurrency',
        'hotel_codes' => 'getHotelCodes'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['flow_tracking_id'] = isset($data['flow_tracking_id']) ? $data['flow_tracking_id'] : null;
        $this->container['destination_code'] = isset($data['destination_code']) ? $data['destination_code'] : null;
        $this->container['check_in'] = isset($data['check_in']) ? $data['check_in'] : null;
        $this->container['check_out'] = isset($data['check_out']) ? $data['check_out'] : null;
        $this->container['country_of_residence'] = isset($data['country_of_residence']) ? $data['country_of_residence'] : null;
        $this->container['occupancies'] = isset($data['occupancies']) ? $data['occupancies'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['hotel_codes'] = isset($data['hotel_codes']) ? $data['hotel_codes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['destination_code'] === null) {
            $invalid_properties[] = "'destination_code' can't be null";
        }
        if ($this->container['check_in'] === null) {
            $invalid_properties[] = "'check_in' can't be null";
        }
        if ($this->container['check_out'] === null) {
            $invalid_properties[] = "'check_out' can't be null";
        }
        if ($this->container['country_of_residence'] === null) {
            $invalid_properties[] = "'country_of_residence' can't be null";
        }
        if ($this->container['occupancies'] === null) {
            $invalid_properties[] = "'occupancies' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['destination_code'] === null) {
            return false;
        }
        if ($this->container['check_in'] === null) {
            return false;
        }
        if ($this->container['check_out'] === null) {
            return false;
        }
        if ($this->container['country_of_residence'] === null) {
            return false;
        }
        if ($this->container['occupancies'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets flow_tracking_id
     * @return string
     */
    public function getFlowTrackingId()
    {
        return $this->container['flow_tracking_id'];
    }

    /**
     * Sets flow_tracking_id
     * @param string $flow_tracking_id 
     * @return $this
     */
    public function setFlowTrackingId($flow_tracking_id)
    {
        $this->container['flow_tracking_id'] = $flow_tracking_id;

        return $this;
    }

    /**
     * Gets destination_code
     * @return int
     */
    public function getDestinationCode()
    {
        return $this->container['destination_code'];
    }

    /**
     * Sets destination_code
     * @param int $destination_code The unique code value for a destination.
     * @return $this
     */
    public function setDestinationCode($destination_code)
    {
        $this->container['destination_code'] = $destination_code;

        return $this;
    }

    /**
     * Gets check_in
     * @return string
     */
    public function getCheckIn()
    {
        return $this->container['check_in'];
    }

    /**
     * Sets check_in
     * @param string $check_in Include today's date to request same-day availability
     * @return $this
     */
    public function setCheckIn($check_in)
    {
        $this->container['check_in'] = $check_in;

        return $this;
    }

    /**
     * Gets check_out
     * @return string
     */
    public function getCheckOut()
    {
        return $this->container['check_out'];
    }

    /**
     * Sets check_out
     * @param string $check_out Total length of stay cannot be greater than 30 nights.
     * @return $this
     */
    public function setCheckOut($check_out)
    {
        $this->container['check_out'] = $check_out;

        return $this;
    }

    /**
     * Gets country_of_residence
     * @return string
     */
    public function getCountryOfResidence()
    {
        return $this->container['country_of_residence'];
    }

    /**
     * Sets country_of_residence
     * @param string $country_of_residence Passanger country of residence.
     * @return $this
     */
    public function setCountryOfResidence($country_of_residence)
    {
        $this->container['country_of_residence'] = $country_of_residence;

        return $this;
    }

    /**
     * Gets occupancies
     * @return \Swagger\Client\Model\Occupancy[]
     */
    public function getOccupancies()
    {
        return $this->container['occupancies'];
    }

    /**
     * Sets occupancies
     * @param \Swagger\Client\Model\Occupancy[] $occupancies Allow up to 5 occupancies per booking.
     * @return $this
     */
    public function setOccupancies($occupancies)
    {
        $this->container['occupancies'] = $occupancies;

        return $this;
    }

    /**
     * Gets provider
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param string $provider If supplied, search only on requested contracted provider, otherwise search on all contracted providers.
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency For feature use (not available yet).               If supplied, all prices will be in requested currency using our currency exchange, otherwise prices will be in provider currencies.
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets hotel_codes
     * @return string[]
     */
    public function getHotelCodes()
    {
        return $this->container['hotel_codes'];
    }

    /**
     * Sets hotel_codes
     * @param string[] $hotel_codes For feature use              If supplied, 'HotelAvailabilityRS ' will contain only requested hotels, otherwise will return all hotels
     * @return $this
     */
    public function setHotelCodes($hotel_codes)
    {
        $this->container['hotel_codes'] = $hotel_codes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        //if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
        //    return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        //}

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


